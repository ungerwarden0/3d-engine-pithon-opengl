import time

import pygame
from pygame.locals import *

from OpenGL.GL import *
from OpenGL.GLU import *

import math

x = 3.5
y = 0
z = 0

pygame.init()
display = (1500, 800)
scree = pygame.display.set_mode(display, DOUBLEBUF | OPENGL)

glViewport(130, 120, 1300, 660)







is_fulscreen = False

pygame.mouse.set_visible(False)





def Cube():
    glBegin(GL_QUADS)
    for surface in surfaces:
        x = 0000
        for vertex in surface:
            x += 1000
            glColor3fv(colors[x])
            glVertex3fv(vertices[vertex])
    glEnd()

    glBegin(GL_LINES)
    for edge in edges:
        for vertex in edge:
            glVertex3fv(vertices[vertex])
    glEnd()


glEnable(GL_DEPTH_TEST)
glEnable(GL_LIGHTING)
glShadeModel(GL_SMOOTH)
glEnable(GL_COLOR_MATERIAL)
glColorMaterial(GL_FRONT_AND_BACK, GL_AMBIENT_AND_DIFFUSE)


glEnable(GL_LIGHT0)
glLightfv(GL_LIGHT0, GL_AMBIENT, [0.5, 0.5, 0.5, 1])
glLightfv(GL_LIGHT0, GL_DIFFUSE, [3.0, 3.0, 3.0, 10000])

sphere = gluNewQuadric()


glMatrixMode(GL_PROJECTION)
gluPerspective(45, (display[0] / display[1]), 0.1, 500.0) #радиус прорисовки

glMatrixMode(GL_MODELVIEW)
gluLookAt(0, -8, 0, 0, 0, 0, 0, 0, 1)
viewMatrix = glGetFloatv(GL_MODELVIEW_MATRIX)
glLoadIdentity()

# init mouse movement and center mouse on screen
displayCenter = [scree.get_size()[i] // 2 for i in range(2)]
mouseMove = [0, 0]
pygame.mouse.set_pos(displayCenter)

up_down_angle = 0.0
paused = False
run = True
while run:
    y += 0.1

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False

        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE or event.key == pygame.K_RETURN:
                run = False




        if not paused:
            if event.type == pygame.MOUSEMOTION:
                mouseMove = [event.pos[i] - displayCenter[i] for i in range(2)]
            pygame.mouse.set_pos(displayCenter)
            pygame.mouse.set_visible(False)



    if not paused:
        keypress = pygame.key.get_pressed()
        # mouseMove = pygame.mouse.get_rel()






        glLoadIdentity()

        # apply the look up and down
        up_down_angle += mouseMove[1] * 0.1
        glRotatef(up_down_angle, 1.0, 0.0, 0.0)

        # init the view matrix
        glPushMatrix()
        glLoadIdentity()

        # apply the movment
        if keypress[pygame.K_w]:
            glTranslatef(0, 0, 0.3)
        if keypress[pygame.K_s]:
            glTranslatef(0, 0, -0.3)
        if keypress[pygame.K_d]:
            glTranslatef(-0.3, 0, 0)
        if keypress[pygame.K_a]:
            glTranslatef(0.3, 0, 0)
        if keypress[pygame.K_SPACE]:
            glTranslatef(0, -0.3, 0)
        if keypress[pygame.K_LSHIFT]:
            glTranslatef(0, 0.3, 0)

        if keypress[pygame.K_LALT]:
            if is_fulscreen == False:
                glViewport(0, 0, 1500, 800)
                time.sleep(0.1)
                is_fulscreen = True
            elif is_fulscreen == True:
                glViewport(130, 120, 1300, 660)
                time.sleep(0.1)
                is_fulscreen = False

        glRotatef(mouseMove[0] * 0.1, 0.0, 1.0, 0.0)

        # multiply the current matrix by the get the new view matrix and store the final vie matrix
        glMultMatrixf(viewMatrix)
        viewMatrix = glGetFloatv(GL_MODELVIEW_MATRIX)

        # apply view matrix
        glPopMatrix()
        glMultMatrixf(viewMatrix)

        glLightfv(GL_LIGHT0, GL_POSITION,[20, -100, 100, 0])

        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

        glPushMatrix()

        glColor4f(0.5, 0.5, 0.5, 1)
        glBegin(GL_QUADS)
        glVertex3f(-20, -20, -2)
        glVertex3f(20, -20, -2)
        glVertex3f(20, 20, -2)
        glVertex3f(-20, 20, -2)
        glEnd()

        glTranslatef(-1.5, 0, 0)
        glColor4f(0.5, 0.2, 0.2, 1)
        gluSphere(sphere, 1.0, 32000000, 16000)

        glTranslatef(3, 0, 0)
        glColor4f(0.2, 0.5, 1.2, 1)
        gluSphere(sphere, 1.0, 32000000, 16000)

        glTranslatef(x, y, z)
        glColor4f(0.0, 0.8, 0.1, 1)
        gluSphere(sphere, 1.0, 32000000, 16000)

        glTranslatef(3, 0, 0)
        glColor4f(1.2, 1.5, 1.5, 1)
        gluSphere(sphere, 100.0, 320000, 16000)

        glPopMatrix()

        pygame.display.flip()
        pygame.time.wait(14)



pygame.quit()

